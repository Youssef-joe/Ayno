{"version":3,"file":"polyglot.js","sources":["../src/polyglot.ts"],"sourcesContent":["import WebSocket from 'ws';\n\nexport interface SocketOptions {\n  appId: string;\n  token: string;\n  reconnect?: boolean;\n  reconnectInterval?: number;\n}\n\nexport interface Channel {\n  join(): Promise<void>;\n  leave(): void;\n  on(event: string, callback: (data: any) => void): void;\n  off(event: string, callback?: (data: any) => void): void;\n  emit(event: string, data: any): void;\n}\n\nexport class Socket {\n  private ws: WebSocket | null = null;\n  private url: string;\n  private options: SocketOptions;\n  private channels: Map<string, PolyglotChannel> = new Map();\n  private eventListeners: Map<string, ((data: any) => void)[]> = new Map();\n  private reconnectTimer: NodeJS.Timeout | null = null;\n  private connected = false;\n\n  constructor(url: string, options: SocketOptions) {\n    this.url = url;\n    this.options = {\n      reconnect: true,\n      reconnectInterval: 5000,\n      ...options\n    };\n    this.connect();\n  }\n\n  private connect(): void {\n    try {\n      this.ws = new WebSocket(this.url, {\n        headers: {\n          'app_id': this.options.appId,\n          'token': this.options.token\n        }\n      });\n\n      this.ws.on('open', () => {\n        this.connected = true;\n        this.emitEvent('connect');\n      });\n\n      this.ws.on('message', (data: Buffer) => {\n        try {\n          const message = JSON.parse(data.toString());\n          this.handleMessage(message);\n        } catch (err) {\n          console.error('Failed to parse message:', err);\n        }\n      });\n\n      this.ws.on('close', () => {\n        this.connected = false;\n        this.emitEvent('disconnect');\n        if (this.options.reconnect) {\n          this.scheduleReconnect();\n        }\n      });\n\n      this.ws.on('error', (error) => {\n        console.error('WebSocket error:', error);\n        this.emitEvent('error', error);\n      });\n\n    } catch (error) {\n      console.error('Connection failed:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  private scheduleReconnect(): void {\n    if (this.reconnectTimer) clearTimeout(this.reconnectTimer);\n    this.reconnectTimer = setTimeout(() => {\n      console.log('Attempting to reconnect...');\n      this.connect();\n    }, this.options.reconnectInterval);\n  }\n\n  private handleMessage(message: any): void {\n    // Polyglot uses Phoenix-like message format\n    if (message.event === 'phx_reply' && message.payload?.status === 'ok') {\n      // Join success\n      const channel = this.channels.get(message.topic);\n      if (channel) {\n        channel.emitEvent('join');\n      }\n    } else if (message.event && message.topic) {\n      // Regular event\n      const channel = this.channels.get(message.topic);\n      if (channel) {\n        channel.emitEvent(message.event, message.payload);\n      }\n    }\n  }\n\n  private emitEvent(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event) || [];\n    listeners.forEach(callback => callback(data));\n  }\n\n  on(event: string, callback: (data?: any) => void): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback?: (data?: any) => void): void {\n    if (callback) {\n      const listeners = this.eventListeners.get(event) || [];\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    } else {\n      this.eventListeners.delete(event);\n    }\n  }\n\n  channel(topic: string): Channel {\n    if (!this.channels.has(topic)) {\n      this.channels.set(topic, new PolyglotChannel(topic, this));\n    }\n    return this.channels.get(topic)!;\n  }\n\n  disconnect(): void {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n\n  isConnected(): boolean {\n    return this.connected;\n  }\n\n  send(topic: string, event: string, payload: any): void {\n    if (this.ws && this.connected) {\n      const message = {\n        topic,\n        event,\n        payload\n      };\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n}\n\nclass PolyglotChannel implements Channel {\n  private topic: string;\n  private socket: Socket;\n  private eventListeners: Map<string, ((data: any) => void)[]> = new Map();\n  private joined = false;\n\n  constructor(topic: string, socket: Socket) {\n    this.topic = topic;\n    this.socket = socket;\n  }\n\n  async join(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const joinCallback = () => {\n        this.joined = true;\n        this.off('join', joinCallback);\n        resolve();\n      };\n\n      const errorCallback = (error: any) => {\n        this.off('join', joinCallback);\n        this.off('error', errorCallback);\n        reject(error);\n      };\n\n      this.on('join', joinCallback);\n      this.on('error', errorCallback);\n\n      this.socket.send(this.topic, 'phx_join', {});\n    });\n  }\n\n  leave(): void {\n    if (this.joined) {\n      this.socket.send(this.topic, 'phx_leave', {});\n      this.joined = false;\n    }\n  }\n\n  on(event: string, callback: (data: any) => void): void {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event)!.push(callback);\n  }\n\n  off(event: string, callback?: (data: any) => void): void {\n    if (callback) {\n      const listeners = this.eventListeners.get(event) || [];\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    } else {\n      this.eventListeners.delete(event);\n    }\n  }\n\n  emit(event: string, data: any): void {\n    if (this.joined) {\n      this.socket.send(this.topic, event, data);\n    }\n  }\n\n  emitEvent(event: string, data?: any): void {\n    const listeners = this.eventListeners.get(event) || [];\n    listeners.forEach(callback => callback(data));\n  }\n}\n\nexport default Socket;\n"],"names":[],"mappings":";;;;;;MAiBa,MAAM,CAAA;IASjB,WAAY,CAAA,GAAW,EAAE,OAAsB,EAAA;QARvC,IAAE,CAAA,EAAA,GAAqB,IAAI,CAAC;AAG5B,QAAA,IAAA,CAAA,QAAQ,GAAiC,IAAI,GAAG,EAAE,CAAC;AACnD,QAAA,IAAA,CAAA,cAAc,GAAyC,IAAI,GAAG,EAAE,CAAC;QACjE,IAAc,CAAA,cAAA,GAA0B,IAAI,CAAC;QAC7C,IAAS,CAAA,SAAA,GAAG,KAAK,CAAC;AAGxB,QAAA,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,OAAO,GAAG;AACb,YAAA,SAAS,EAAE,IAAI;AACf,YAAA,iBAAiB,EAAE,IAAI;AACvB,YAAA,GAAG,OAAO;SACX,CAAC;QACF,IAAI,CAAC,OAAO,EAAE,CAAC;KAChB;IAEO,OAAO,GAAA;AACb,QAAA,IAAI;YACF,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE;AAChC,gBAAA,OAAO,EAAE;AACP,oBAAA,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;AAC5B,oBAAA,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;AAC5B,iBAAA;AACF,aAAA,CAAC,CAAC;YAEH,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,MAAK;AACtB,gBAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AACtB,gBAAA,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAC5B,aAAC,CAAC,CAAC;YAEH,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,IAAY,KAAI;AACrC,gBAAA,IAAI;oBACF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC5C,oBAAA,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;iBAC7B;gBAAC,OAAO,GAAG,EAAE;AACZ,oBAAA,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,GAAG,CAAC,CAAC;iBAChD;AACH,aAAC,CAAC,CAAC;YAEH,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,MAAK;AACvB,gBAAA,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;AACvB,gBAAA,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AAC7B,gBAAA,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;oBAC1B,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBAC1B;AACH,aAAC,CAAC,CAAC;YAEH,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,KAAI;AAC5B,gBAAA,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;AACzC,gBAAA,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACjC,aAAC,CAAC,CAAC;SAEJ;QAAC,OAAO,KAAK,EAAE;AACd,YAAA,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,CAAC;YAC3C,IAAI,CAAC,iBAAiB,EAAE,CAAC;SAC1B;KACF;IAEO,iBAAiB,GAAA;QACvB,IAAI,IAAI,CAAC,cAAc;AAAE,YAAA,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAC3D,QAAA,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,MAAK;AACpC,YAAA,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YAC1C,IAAI,CAAC,OAAO,EAAE,CAAC;AACjB,SAAC,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;KACpC;AAEO,IAAA,aAAa,CAAC,OAAY,EAAA;;AAEhC,QAAA,IAAI,OAAO,CAAC,KAAK,KAAK,WAAW,IAAI,OAAO,CAAC,OAAO,EAAE,MAAM,KAAK,IAAI,EAAE;;AAErE,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,OAAO,EAAE;AACX,gBAAA,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;aAC3B;SACF;aAAM,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,EAAE;;AAEzC,YAAA,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;aACnD;SACF;KACF;IAEO,SAAS,CAAC,KAAa,EAAE,IAAU,EAAA;AACzC,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AACvD,QAAA,SAAS,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/C;IAED,EAAE,CAAC,KAAa,EAAE,QAA8B,EAAA;QAC9C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SACpC;AACD,QAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChD;IAED,GAAG,CAAC,KAAa,EAAE,QAA+B,EAAA;QAChD,IAAI,QAAQ,EAAE;AACZ,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACvD,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1C,YAAA,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACd,gBAAA,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC5B;SACF;aAAM;AACL,YAAA,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACnC;KACF;AAED,IAAA,OAAO,CAAC,KAAa,EAAA;QACnB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;AAC7B,YAAA,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;SAC5D;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC;KAClC;IAED,UAAU,GAAA;AACR,QAAA,IAAI,IAAI,CAAC,cAAc,EAAE;AACvB,YAAA,YAAY,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;AAClC,YAAA,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;SAC5B;AACD,QAAA,IAAI,IAAI,CAAC,EAAE,EAAE;AACX,YAAA,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;SACjB;KACF;IAED,WAAW,GAAA;QACT,OAAO,IAAI,CAAC,SAAS,CAAC;KACvB;AAED,IAAA,IAAI,CAAC,KAAa,EAAE,KAAa,EAAE,OAAY,EAAA;QAC7C,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,SAAS,EAAE;AAC7B,YAAA,MAAM,OAAO,GAAG;gBACd,KAAK;gBACL,KAAK;gBACL,OAAO;aACR,CAAC;AACF,YAAA,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;SACvC;KACF;AACF,CAAA;AAED,MAAM,eAAe,CAAA;IAMnB,WAAY,CAAA,KAAa,EAAE,MAAc,EAAA;AAHjC,QAAA,IAAA,CAAA,cAAc,GAAyC,IAAI,GAAG,EAAE,CAAC;QACjE,IAAM,CAAA,MAAA,GAAG,KAAK,CAAC;AAGrB,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;AACnB,QAAA,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACtB;AAED,IAAA,MAAM,IAAI,GAAA;QACR,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAI;YACrC,MAAM,YAAY,GAAG,MAAK;AACxB,gBAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;AACnB,gBAAA,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AAC/B,gBAAA,OAAO,EAAE,CAAC;AACZ,aAAC,CAAC;AAEF,YAAA,MAAM,aAAa,GAAG,CAAC,KAAU,KAAI;AACnC,gBAAA,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AAC/B,gBAAA,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;gBACjC,MAAM,CAAC,KAAK,CAAC,CAAC;AAChB,aAAC,CAAC;AAEF,YAAA,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AAC9B,YAAA,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;AAEhC,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;AAC/C,SAAC,CAAC,CAAC;KACJ;IAED,KAAK,GAAA;AACH,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE;AACf,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,EAAE,CAAC,CAAC;AAC9C,YAAA,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;KACF;IAED,EAAE,CAAC,KAAa,EAAE,QAA6B,EAAA;QAC7C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;YACnC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SACpC;AACD,QAAA,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChD;IAED,GAAG,CAAC,KAAa,EAAE,QAA8B,EAAA;QAC/C,IAAI,QAAQ,EAAE;AACZ,YAAA,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACvD,MAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC1C,YAAA,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;AACd,gBAAA,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC5B;SACF;aAAM;AACL,YAAA,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACnC;KACF;IAED,IAAI,CAAC,KAAa,EAAE,IAAS,EAAA;AAC3B,QAAA,IAAI,IAAI,CAAC,MAAM,EAAE;AACf,YAAA,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;SAC3C;KACF;IAED,SAAS,CAAC,KAAa,EAAE,IAAU,EAAA;AACjC,QAAA,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;AACvD,QAAA,SAAS,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KAC/C;AACF;;;;;"}